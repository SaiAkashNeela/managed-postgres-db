version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: managed-postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
      POSTGRES_DB: ${POSTGRES_DB:-maindb}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
      DOMAIN: ${DOMAIN:-localhost}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      # Data persistence
      - postgres_data:/var/lib/postgresql/data
      # SSL certificates (supports both Let's Encrypt and self-signed)
      - ./certs:/var/lib/postgresql/certs:ro
      # Let's Encrypt certificates (if using certbot)
      - ${LETSENCRYPT_PATH:-./letsencrypt}:/etc/letsencrypt:ro
      # Custom PostgreSQL configuration
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      # pg_hba.conf for authentication
      - ./config/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      # Initialization scripts
      - ./init:/docker-entrypoint-initdb.d:ro
    command: |
      sh -c '
        # Wait for certificates to be available
        if [ ! -f /var/lib/postgresql/certs/server.crt ]; then
          echo "Waiting for SSL certificates..."
          sleep 5
        fi
        # Start PostgreSQL with custom config
        postgres -c config_file=/etc/postgresql/postgresql.conf -c hba_file=/etc/postgresql/pg_hba.conf
      '
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-maindb}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - postgres-network
    labels:
      # Coolify labels for automatic deployment
      - "coolify.managed=true"
      - "coolify.name=managed-postgres-db"
      - "coolify.port=5432"
      - "coolify.protocol=tcp"

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - postgres-network
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  postgres-network:
    driver: bridge
